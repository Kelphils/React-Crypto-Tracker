version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: kelphils/react-capstone
    docker:
      - image: circleci/node:13.8.0

jobs:
  lint-react-app:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Linting React
          command: |
            npm install
            npm run lint
      - save_cache:
          paths: 
            - ./node_modules
          key: dependency-cache-{{ checksum "package-lock.json" }}

  lint-dockerfile:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout    
      - run:
          name: install hadolint
          command: |            
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                sudo chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |            
            hadolint Dockerfile
  
  docker-build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
            
  upload-docker-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "kelphils" --password-stdin
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  eks-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Create-Eks-Cluster
          command: |
            chmod +x install_kubectl.sh && \
            ./install_kubectl.sh
            chmod +x install_eksctl.sh && \
            ./install_eksctl.sh
            chmod +x check_eks_cluster.sh &&\
            ./check_eks_cluster.sh
            no_output_timeout: 45m

  
workflows:
  default:
    jobs:
      - eks-cluster